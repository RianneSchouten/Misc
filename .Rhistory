set.seed(3472)
data <- mvtnorm::rmvnorm(n = 300,
mean = c(0, 3),
sigma = matrix(c(1, 0.7, 0.7, 1), ncol = 2))
data <- as.data.frame(data)
colnames(data) <- c("y", "xp")
p <- 2
data$x <- data$xp ^ (1 / p)
probs <- ifelse(data$y <= 0, 0.2, 0.6)
data$x <- ifelse(runif(nrow(data)) <= probs, NA, data$x)
imp <- icet(data, "x", "y", m = 5, maxit = 10, verbose = TRUE)
imp2 <- icet.mids(data, "x", "y", m = 5, maxit = 10, verbose = TRUE)
std_imp <- mice(data, maxit = 0, print = FALSE)
pred <- std_imp$predictorMatrix
pred[, "xp"] <- 0
pred["xp", ] <- 0
meth <- std_imp$method
std_imp <- mice(data, m = 5, maxit = 10, pred = pred, meth = meth, print = FALSE)
data$z <- runif(n = 300)
res <- with(imp2, lm(y ~ x))
std_res <- with(std_imp, lm(y ~ x))
imp2
Terms <- terms(formula, specials = "fp")
Terms
vars <- labels(Terms)
vars
vars <- all.vars(formula)
vars
vars <- all.vars(formula)[-1]
vars
untangle.specials(Terms, "fp")
formula <- y ~ fp(x, df = 4) + fp(z, df = 2)
mids <- imp2
Terms <- terms(formula, specials = "fp")
Terms
fp.pos <- attr(Terms, "specials")$fp - 1
fp.pas
fp.pos
debug(mfp)
f <- mfp(Surv(rfst, cens) ~ fp(age, df = 4, select = 0.05) + fp(prm, df = 4, select = 0.05), family = cox, data = GBSG)
m
str(m)
f <- mfp(Surv(rfst, cens) ~ fp(age, df = 4, select = 0.05) + fp(prm, df = 4, select = 0.05), family = cox, data = GBSG)
m2
m2 %>% str()
str(m2)
m2[2]
m2[3]
m2[4]
str(m2)
str(m2[1])
str(m2[2])
str(m2[3])
str(m2[1])
m2
m2
m2 %>% head()
head(m2)
tt
str(m)
?model.frame
Terms
model.frame(formula, complete(imp2, 1))
imp2, 1
imp2
imp2 <- icet.mids(data, "x", c("y", "z"), m = 5, maxit = 10, verbose = TRUE)
imp2
model.frame(formula, complete(imp2, 1))
str(model.frame(formula, complete(imp2, 1)))
str(model.frame(formula, NULL)
)
complete(imp2, 1)[0, ]
str(model.frame(formula, complete(imp2, 1)[0, ]))
m <- model.frame(formula, complete(imp2)[0, ])
m$y
fp.pos <- attr(Terms, "specials")$fp - 1
fp.def <- m[, fp.mpos, drop = FALSE]
fp.pos <- attr(Terms, "specials")$fp
fp.pos
fp.def <- m[, fp.pos, drop = FALSE]
fp.def
?mfp
m
ncol(m)
mids
nrow(mids$data)
nx <- ncol(m) - 1
nobs <- nrow(mids$data)
df.list <- rep(1, nx)
alpha.list <- rep(alpha, nx)
select.list <- rep(select, nx)
fp.pos <- attr(Terms, "specials")$fp
fp.def <- m[, fp.pos, drop = FALSE]
df.list[fp.pos] <- unlist(lapply(fp.data, attr, "df"))
alpha <- 0.05
select <- 1
Terms <- terms(formula, specials = "fp")
m <- model.frame(formula, complete(imp2)[0, ])
nx <- ncol(m) - 1
nobs <- nrow(mids$data)
df.list <- rep(1, nx)
alpha.list <- rep(alpha, nx)
select.list <- rep(select, nx)
fp.pos <- attr(Terms, "specials")$fp
fp.def <- m[, fp.pos, drop = FALSE]
df.list[fp.pos] <- unlist(lapply(fp.data, attr, "df"))
df.list
df.list[fp.pos] <- unlist(lapply(fp.def, attr, "df"))
df.list
nx
fp.pos
fp.mpos <- attr(Terms, "specials")$fp
fp.pos <- fp.mpos -1
fp.def <- m[, fp.pos, drop = FALSE]
nx <- ncol(m) - 1
nobs <- nrow(mids$data)
df.list <- rep(1, nx)
alpha.list <- rep(alpha, nx)
select.list <- rep(select, nx)
fp.mpos <- attr(Terms, "specials")$fp
fp.pos <- fp.mpos -1
fp.def <- m[, fp.pos, drop = FALSE]
df.list[fp.pos] <- unlist(lapply(fp.def, attr, "df"))
df.list
fp.def
fp.def <- m[, fp.mpos, drop = FALSE]
df.list[fp.pos] <- unlist(lapply(fp.def, attr, "df"))
fp.def
df.list
alpha.list[fp.pos] <- unlist(lapply(fp.def, attr, "alpha"))
alpha.list[sapply(alpha.list, is.na)] <- alpha
select.list[fp.pos] <- unlist(lapply(fp.def, attr, "select"))
select.list[sapply(select.list, is.na)] <- select
alpha.list
select.list
formula <- y ~ fp(x, df = 4, alpha = 0.1) + fp(z, df = 2, select = 0.5)
mids <- imp2
alpha <- 0.05
select <- 1
Terms <- terms(formula, specials = "fp")
m <- model.frame(formula, complete(imp2)[0, ])
nx <- ncol(m) - 1
nobs <- nrow(mids$data)
df.list <- rep(1, nx)
alpha.list <- rep(alpha, nx)
select.list <- rep(select, nx)
fp.mpos <- attr(Terms, "specials")$fp
fp.pos <- fp.mpos -1
fp.def <- m[, fp.mpos, drop = FALSE]
df.list[fp.pos] <- unlist(lapply(fp.def, attr, "df"))
alpha.list[fp.pos] <- unlist(lapply(fp.def, attr, "alpha"))
alpha.list[sapply(alpha.list, is.na)] <- alpha
select.list[fp.pos] <- unlist(lapply(fp.def, attr, "select"))
select.list[sapply(select.list, is.na)] <- select
alpha.list
select.list
class(with(std_imp, lm(y ~ x)))
?mfp:::fp.fit
D2(res)
m
attributes9m
attributes(m)
drop.terms(formula, "x")
drop.terms(Terms, "x")
drop.terms(Terms, "-x")
?drop.terms
update.formula(formula, "-x")
update.formula(formula, ~ -x)
formula
update.formula(formula, ~ . -x)
Terms
formula <- y ~ I(x^2) + I(log(z))
update.formula(formula, ~ . -x)
all.vars(formula)
formula <- y ~ I(x^2) + I(log(x) * x^2) + I(log(z))
all.vars(formula)
terms(formula)
labels(terms(formula))
add <- as.formula(paste0("~ . + ", fpmi.gen(variable, 2)))
add <- as.formula(paste0("~ . + ", fpmi.gen("x", 2)))
add
update.formula(formula, add)
add <- as.formula(paste0("~ . + ", fpmi.gen("x", 1)))
update.formula(formula, add)
formula
add <- as.formula(paste0("~ . + ", fpmi.gen("x", c(1, 1))))
update.formula(formula, add)
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
add(formula, fpmi.gen("x", c(1, 1))
add(formula, fpmi.gen("x", c(1, 1)))
add(formula, fpmi.gen("x", c(2)))
D2(res)
D1(res)
res
?D1
D1(with(imp2, lm(y ~ x + z)))
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x)))
pchisq(1.718668, 1, lower.tail = FALSE)
dir_root <- "mfpmi"
dir_test <- "testdata"
source(file.path(dir_root, "icet.R"))
# Simulated example -------------------------------------------------------
set.seed(3472)
n <- 10000
data <- mvtnorm::rmvnorm(n = n,
mean = c(0, 3),
sigma = matrix(c(1, 0.7, 0.7, 1), ncol = 2))
data <- as.data.frame(data)
colnames(data) <- c("y", "xp")
p <- 2
data$x <- data$xp ^ (1 / p)
data$z <- runif(n = n)
probs <- ifelse(data$y <= 0, 0.2, 0.6)
data$x <- ifelse(runif(nrow(data)) <= probs, NA, data$x)
imp <- icet(data, "x", c("y", "z"), m = 5, maxit = 10, verbose = TRUE)
imp2 <- icet.mids(data, "x", c("y", "z"), m = 5, maxit = 10, verbose = TRUE)
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x)))
qchisq(0.4695359, 1, lower.tail = FALSE)
D1
mice::testModels
??testModels
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x)))
str(D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x))))
str(D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x))))$result
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x)))$result
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x)))$result[, "P(>F)"]
D1(with(imp2, lm(y ~ x + z)), with(imp2, lm(y ~ x + z)))
?mitml::testEstimates
res
pool(res)
library(mitml)
map(res$analyses, ~coef(.)[2]
)
library(purrr)
map(res$analyses, ~coef(.)[2])
map(res$analyses, ~vcov(.)[2, 2])
res$analyses[[1]] %>% summary()
sqrt(0.02195607)
testEstimates(res, map(res$analyses, ~coef(.)[2]), map(res$analyses, ~vcov(.)[2, 2]))
testEstimates(res$analyses, map(res$analyses, ~coef(.)[2]), map(res$analyses, ~vcov(.)[2, 2]))
testEstimates(res$analyses)
testEstimates(map(res$analyses, ~coef(.)[2]), map(res$analyses, ~vcov(.)[2, 2]))
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]))
D1(res)
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]))are]
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]))$result
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2])) %>% str()
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2])$estimates
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]))$estimates
14.42823 ** 2
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]))$estimates[, "P(>|t|)"]
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]), df.com = 298)
testEstimates(qhat = map(res$analyses, ~coef(.)[2]), uhat = map(res$analyses, ~vcov(.)[2, 2]), df.com = 298)$estimates[, "P(>|t|)"]
testEstimates(with(imp2, lm(y ~ x + z))($analyses)
testEstimates(with(imp2, lm(y ~ x + z))$analyses)
testEstimates(with(imp2, lm(y ~ x))$analyses)
testEstimates(with(imp2, lm(y ~ 1))$analyses)
D1(with(imp2, lm(y ~ 1))$analyses)
testModels()
testModels
testEstimates(with(imp2, lm(y ~ x + z))$analyses)
testEstimates(with(imp2, lm(y ~ x + z))$analyses) %>% str()
fpmi.fit <- function(formula, mids, variable, df){
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
pwrs <- c(-2, -1, -0.5, 0, 0.5, 1, 2, 3)
npwrs <- length(pwrs)
# fit the linear model
linear <- add(formula, variable)
fit_lin <- with(mids, glm(linear, ...))
fit_fp1 <- NULL
p_fp1 <- 1
fit_fp2 <- NULL
p_fp2 <- 1
if(df > 1){
# Find best single power transformation
for(i in 1:npwrs) {
if(i != 1){ # (but ignore 1, which is the same as linear)
fp1 <- add(formula, fpmi.gen(variable, i))
fit1 <- with(mids, glm(fp1, ...))
p <- D1(fit1)$result[, "P(>F)"]
if(p < p_fp1) {
fit_fp1 <- fit1
p_fp1 <- p
}
}
if(df == 4) {
# Find best two power transformation
j <- i
while(j <= npwrs) {
fp2 <- add(formula, fpmi.gen(variable, c(i, j)))
fit2 <- with(mids, glm(fp2, ...))
p <- D1(fit2)$result[, "P(>F)"]
if(p < p_fp2) {
fit_fp2 <- fit2
p_fp2 <- p
}
j <- j + 1
}
}
}
}
res <- list(lin = fit, fp1 = fit_fp1, fp2 = fit_fp2)
}
formula
fpmi.fit(y ~ z, imp2, "x", 4)
fpmi.fit(y ~ z, imp2, "x", 4, family = binomial)
fpmi.fit <- function(formula, mids, variable, df, ...){
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
pwrs <- c(-2, -1, -0.5, 0, 0.5, 1, 2, 3)
npwrs <- length(pwrs)
# fit the linear model
linear <- add(formula, variable)
fit_lin <- with(mids, glm(linear, ...))
fit_fp1 <- NULL
p_fp1 <- 1
fit_fp2 <- NULL
p_fp2 <- 1
if(df > 1){
# Find best single power transformation
for(i in 1:npwrs) {
if(i != 1){ # (but ignore 1, which is the same as linear)
fp1 <- add(formula, fpmi.gen(variable, i))
fit1 <- with(mids, glm(fp1, ...))
p <- D1(fit1)$result[, "P(>F)"]
if(p < p_fp1) {
fit_fp1 <- fit1
p_fp1 <- p
}
}
if(df == 4) {
# Find best two power transformation
j <- i
while(j <= npwrs) {
fp2 <- add(formula, fpmi.gen(variable, c(i, j)))
fit2 <- with(mids, glm(fp2, ...))
p <- D1(fit2)$result[, "P(>F)"]
if(p < p_fp2) {
fit_fp2 <- fit2
p_fp2 <- p
}
j <- j + 1
}
}
}
}
res <- list(lin = fit, fp1 = fit_fp1, fp2 = fit_fp2)
}
fpmi.fit(y ~ z, imp2, "x", 4, family = binomial)
imp2
fpmi.fit <- function(formula, mids, variable, df, ...){
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
pwrs <- c(-2, -1, -0.5, 0, 0.5, 1, 2, 3)
npwrs <- length(pwrs)
# fit the linear model
linear <- add(formula, variable)
fit_lin <- with(mids, glm(formula(format(linear)), ...))
fit_fp1 <- NULL
p_fp1 <- 1
fit_fp2 <- NULL
p_fp2 <- 1
if(df > 1){
# Find best single power transformation
for(i in 1:npwrs) {
if(i != 1){ # (but ignore 1, which is the same as linear)
fp1 <- add(formula, fpmi.gen(variable, i))
fit1 <- with(mids, glm(fp1, ...))
p <- D1(fit1)$result[, "P(>F)"]
if(p < p_fp1) {
fit_fp1 <- fit1
p_fp1 <- p
}
}
if(df == 4) {
# Find best two power transformation
j <- i
while(j <= npwrs) {
fp2 <- add(formula, fpmi.gen(variable, c(i, j)))
fit2 <- with(mids, glm(fp2, ...))
p <- D1(fit2)$result[, "P(>F)"]
if(p < p_fp2) {
fit_fp2 <- fit2
p_fp2 <- p
}
j <- j + 1
}
}
}
}
res <- list(lin = fit, fp1 = fit_fp1, fp2 = fit_fp2)
}
fpmi.fit(y ~ z, imp2, "x", 4, family = binomial)
fpmi.fit(y ~ z, imp2, "x", 4)
fpmi.fit <- function(formula, mids, variable, df, ...){
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
pwrs <- c(-2, -1, -0.5, 0, 0.5, 1, 2, 3)
npwrs <- length(pwrs)
# fit the linear model
linear <- add(formula, variable)
fit_lin <- with(mids, glm(formula(format(linear)), ...))
fit_fp1 <- NULL
p_fp1 <- 1
fit_fp2 <- NULL
p_fp2 <- 1
if(df > 1){
# Find best single power transformation
for(i in 1:npwrs) {
if(i != 1){ # (but ignore 1, which is the same as linear)
fp1 <- add(formula, fpmi.gen(variable, i))
fit1 <- with(mids, glm(formula(format(fp1)), ...))
p <- D1(fit1)$result[, "P(>F)"]
if(p < p_fp1) {
fit_fp1 <- fit1
p_fp1 <- p
}
}
if(df == 4) {
# Find best two power transformation
j <- i
while(j <= npwrs) {
fp2 <- add(formula, fpmi.gen(variable, c(i, j)))
fit2 <- with(mids, glm(formula(format(fp2)), ...))
p <- D1(fit2)$result[, "P(>F)"]
if(p < p_fp2) {
fit_fp2 <- fit2
p_fp2 <- p
}
j <- j + 1
}
}
}
}
res <- list(lin = fit, fp1 = fit_fp1, fp2 = fit_fp2)
}
fpmi.fit(y ~ z, imp2, "x", 4)
fpmi.fit <- function(formula, mids, variable, df, ...){
add <- function(formula, term){
term_as_form <- as.formula(paste0("~ . + ", term))
update.formula(formula, term_as_form)
}
pwrs <- c(-2, -1, -0.5, 0, 0.5, 1, 2, 3)
npwrs <- length(pwrs)
# fit the linear model
linear <- add(formula, variable)
fit_lin <- with(mids, glm(formula(format(linear)), ...))
fit_fp1 <- NULL
p_fp1 <- 1
fit_fp2 <- NULL
p_fp2 <- 1
if(df > 1){
# Find best single power transformation
for(i in 1:npwrs) {
if(i != 1){ # (but ignore 1, which is the same as linear)
fp1 <- add(formula, fpmi.gen(variable, i))
fit1 <- with(mids, glm(formula(format(fp1)), ...))
p <- D1(fit1)$result[, "P(>F)"]
if(p < p_fp1) {
fit_fp1 <- fit1
p_fp1 <- p
}
}
if(df == 4) {
# Find best two power transformation
j <- i
while(j <= npwrs) {
fp2 <- add(formula, fpmi.gen(variable, c(i, j)))
fit2 <- with(mids, glm(formula(format(fp2)), ...))
p <- D1(fit2)$result[, "P(>F)"]
if(p < p_fp2) {
fit_fp2 <- fit2
p_fp2 <- p
}
j <- j + 1
}
}
}
}
res <- list(lin = fit_lin, fp1 = fit_fp1, fp2 = fit_fp2)
res
}
fpmi.fit(y ~ z, imp2, "x", 4)
x1 <- rbinom(10000, size = 1, prob = 0.5)
x2 <- rbinom(10000, size = 1, prob = 0.5)
mean(x1)
mean(x2)
mean(x1 * x2)
x <- rnorm(10000)
logistic <-function(x) 1 / (1 + exp(-x))
x1 <- rbinom(10000, size = 1, prob = logistic(x))
x2 <- rbinom(10000, size = 1, prob = logistic(x))
mean(x1)
mean(x2)
mean(x1 * x2)
10!
factorial(10)
factorial(3)
2^3
2^10
